class TreeNode {
    constructor(val, left = null, right = null) {
        this.value = val;
        this.leftChild = left;
        this.rightChild = right;
    }
}

function search(searchValue, node) {
    if (node === null || node.value === searchValue) {
        return node;
    } else if (searchValue < node.value) {
        return search(searchValue, node.leftChild);
    } else {
        return search(searchValue, node.rightChild);
    }
}

function insert(value, node) {
    if (value < node.value) {
        if (node.leftChild === null) {
            node.leftChild = new TreeNode(value);
        } else {
            insert(value, node.leftChild);
        }
    } else if (value > node.value) {
        if (node.rightChild === null) {
            node.rightChild = new TreeNode(value);
        } else {
            insert(value, node.rightChild);
        }
    }
}

function traverseAndPrint(node) {
    if (node === null) {
        return;
    }
    traverseAndPrint(node.leftChild);
    process.stdout.write(node.value + ' ');
    traverseAndPrint(node.rightChild);
}

function deleteNode(valueToDelete, node) {
    if (node === null) {
        return null;
    } else if (valueToDelete < node.value) {
        node.leftChild = deleteNode(valueToDelete, node.leftChild);
        return node;
    } else if (valueToDelete > node.value) {
        node.rightChild = deleteNode(valueToDelete, node.rightChild);
        return node;
    } else {
        if (node.leftChild === null) {
            return node.rightChild;
        } else if (node.rightChild === null) {
            return node.leftChild;
        } else {
            node.rightChild = lift(node.rightChild, node);
            return node;
        }
    }
}

function lift(node, nodeToDelete) {
    if (node.leftChild) {
        node.leftChild = lift(node.leftChild, nodeToDelete);
        return node;
    } else {
        nodeToDelete.value = node.value;
        return node.rightChild;
    }
}

const node1 = new TreeNode(25)
const node2 = new TreeNode(75)
const root = new TreeNode(50, node1, node2)

// console.log(root)

insert(33,root)
insert(11,root)
insert(61,root)
insert(89,root)
insert(30,root)
insert(40,root)
insert(55,root)
insert(82,root)
insert(95,root)
deleteNode(95,root)
deleteNode(33,root)
traverseAndPrint(root)